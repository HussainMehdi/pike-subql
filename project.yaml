specVersion: 1.0.0
name: acala-evm-starter
version: 0.0.1
runner:
  node:
    name: '@subql/node'
    version: '*'
  query:
    name: '@subql/query'
    version: '*'
description: A basic Acala EVM example project with an event and call handler. Read more about this at https://university.subquery.network/build/substrate-evm.html
repository: https://github.com/subquery/acala-evm-starter
schema:
  file: ./schema.graphql
network:
  chainId: '0x5c562e6300954998233c9a40b6b86f3028977e6d32d0da1af207738d19f98c1b'
  endpoint: wss://acala-mandala.api.onfinality.io/public-ws
  # Dictionary not currently supported
  # dictionary: https://api.subquery.network/sq/subquery/moonriver-dictionary
  chaintypes:
    file: ./dist/chaintypes.js
dataSources:
  - kind: substrate/AcalaEvm
    startBlock: 1662400
    processor:
      file: ./dist/acalaEvmProcessor.js
      options:
        abi: comptroller
        address: '0x6111835ded0d415cD3D102A4A1b1d2015c1ee8BE' # Comptroller
    assets:
      comptroller:
        file: ./abis/comptroller.json
    mapping:
      file: ./dist/index.js
      handlers:
        - handler: handleMarketListed
          kind: substrate/AcalaEvmEvent
          filter:
            topics:
              - MarketListed(address)
        - handler: handleMarketEntered
          kind: substrate/AcalaEvmEvent
          filter:
            topics:
              - MarketEntered(address,address)
        - handler: handleMarketExited
          kind: substrate/AcalaEvmEvent
          filter:
            topics:
              - MarketExited(address,address)
        - handler: handleNewCloseFactor
          kind: substrate/AcalaEvmEvent
          filter:
            topics:
              - NewCloseFactor(uint256,uint256)
        - handler: handleNewCollateralFactor
          kind: substrate/AcalaEvmEvent
          filter:
            topics:
              - NewCollateralFactor(address,uint256,uint256)
        - handler: handleNewLiquidationIncentive
          kind: substrate/AcalaEvmEvent
          filter:
            topics:
              - NewLiquidationIncentive(uint256,uint256)
        # - handler: handleNewMaxAssets
        #   kind: substrate/AcalaEvmEvent
        #   filter:
        #     topics:
        #       - NewMaxAssets(uint256,uint256)
        - handler: handleNewPriceOracle
          kind: substrate/AcalaEvmEvent
          filter:
            topics:
              - NewPriceOracle(address,address)
# templates:
#   - name: CToken
#     kind: substrate/AcalaEvm
#     processor:
#       file: './dist/acalaEvm.js'
#       options:
#         abi: CToken
#         # we do not know the address at this point, it will be provided when instantiated
#     assets:
#         - name: CToken
#           file: ./abis/ctoken.json
#         - name: PriceOracle2
#           file: ./abis/priceOracle2.json
#         - name: ERC20
#           file: ./abis/erc20.json
#     mapping:
#       entities:
#         - User
#         - Market
#         - CTokenInfo
#       file: ./dist/index.js
#       handlers:
#         - handler: handleMint
#           kind: substrate/AcalaEvmEvent
#           filter:
#             topics:
#               - Mint(address,uint256,uint256)
#         - handler: handleRedeem
#           kind: substrate/AcalaEvmEvent
#           filter:
#             topics:
#               - Redeem(address,uint256,uint256)
#         - handler: handleBorrow
#           kind: substrate/AcalaEvmEvent
#           filter:
#             topics:
#               - Borrow(address,uint256,uint256,uint256)
#         - handler: handleRepayBorrow
#           kind: substrate/AcalaEvmEvent
#           filter:
#             topics:
#               - RepayBorrow(address,address,uint256,uint256,uint256)
#         - handler: handleLiquidateBorrow
#           kind: substrate/AcalaEvmEvent
#           filter:
#             topics:
#               - LiquidateBorrow(address,address,uint256,address,uint256)
#         - handler: handleAccrueInterest
#           kind: substrate/AcalaEvmEvent
#           filter:
#             topics:
#               - AccrueInterest(uint256,uint256,uint256)
#         - handler: handleNewReserveFactor
#           kind: substrate/AcalaEvmEvent
#           filter:
#             topics:
#               - NewReserveFactor(uint256,uint256)
#         - handler: handleTransfer
#           kind: substrate/AcalaEvmEvent
#           filter:
#             topics:
#               - Transfer(indexed address,indexed address,uint256)      
#         - handler: handleNewMarketInterestRateModel
#           kind: substrate/AcalaEvmEvent
#           filter:
#             topics:
#               - NewMarketInterestRateModel(address,address)
